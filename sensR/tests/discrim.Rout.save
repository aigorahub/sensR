
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(sensR)
> 
> ## Testing Tetrad link function:
> d.primePwr(1, sample.size = 50, method = "tetrad")
[1] 0.731897
> 
> d.primeSS(1, target.power = 0.90, method = "tetrad")
[1] 82
> discrim(10, 15, method = "tetrad", statistic = "score")

Estimates for the tetrad discrimination protocol with 10 correct
answers in 15 trials. One-sided p-value and 95 % two-sided confidence
intervals are based on the Pearson and score statistics. 

        Estimate Std. Error  Lower  Upper
pc        0.6667     0.1217 0.3869 0.8701
pd        0.5000     0.1826 0.0803 0.8052
d-prime   1.5878     0.4193 0.5511 2.4433

Result of difference test:
Pearson X-square statistic = 7.5, df = 1, p-value: 0.003085
Alternative hypothesis: d-prime is greater than 0 

> 
> set.seed(12345)
> discrimSim(sample.size = 10, replicates = 3, d.prime = 2,
+            method = "tetrad", sd.indiv = 1)
 [1] 3 3 1 2 3 1 3 2 3 2
> 
> rescale(pd = c(.6,.7), std.err = c(.2, NA), method="tetrad")

Estimates for the tetrad protocol:
         pc  pd d.prime
1 0.7333333 0.6 1.82632
2 0.8000000 0.7 2.09460

Standard errors:
         pc  pd   d.prime
1 0.1333333 0.2 0.4999855
2        NA  NA        NA
> psyfun(2, method = "tetrad")
[1] 0.7776671
> psyinv(0.8, method = "tetrad")
[1] 2.0946
> psyderiv(2, method = "tetrad")
[1] 0.2431633
> 
> x <- c(3,2,6,8,3,4,6,0,9,9,0,2,1,2,8,9,5,7)
> n <- c(10,9,8,9,8,6,9,10,10,10,9,9,10,10,10,10,9,10)
> dat <- data.frame(x, n)
> 
> (bb <- betabin(dat, method = "tetrad"))

Call:
betabin(data = dat, method = "tetrad")

Coefficients:
    mu   gamma  
0.2979  0.4683  

> (bb <- betabin(dat, corrected = FALSE, method = "tetrad"))

Call:
betabin(data = dat, method = "tetrad", corrected = FALSE)

Coefficients:
    mu   gamma  
0.4938  0.3144  

> summary(bb)

Beta-binomial model for the tetrad protocol
with 95 percent confidence intervals

        Estimate Std. Error   Lower   Upper
mu       0.49381    0.07238 0.35195 0.63568
gamma    0.31443    0.08618 0.14551 0.48334
pc       0.49381    0.07238 0.35195 0.63568
pd       0.24072    0.10857 0.02792 0.45352
d-prime  1.00001    0.25990 0.32053 1.48226

log-likelihood:  -41.7087 
LR-test of over-dispersion, G^2: 36.4922 df: 1 p-value: 1.533e-09 
LR-test of association, G^2: 57.4545 df: 2 p-value: 3.341e-13 
> vcov(bb)
              [,1]          [,2]
[1,]  0.0052391046 -0.0003882818
[2,] -0.0003882818  0.0074277876
> logLik(bb)
'log Lik.' -41.70868 (df=2)
> AIC(bb)
[1] 87.41736
> coef(bb)
       mu     gamma 
0.4938123 0.3144258 
> 
> ## Testing that the A-not A confidence interval finds the right
> ## confint method for glm objects in MASS:
> m1 <- AnotA(10, 20, 3, 20)
> 
> ## Make ci.res:
> ## ci.res := dput(as.vector(confint(m1)))
> ## Compare with current results:
> ci.res <- c(-0.550522667455557, 0.190017579324113, 0.550522667455557,
+             1.93313337684111)
> stopifnot(isTRUE(all.equal(ci.res, as.vector(confint(m1)))))
Waiting for profiling to be done...
> 
> proc.time()
   user  system elapsed 
  0.361   0.027   0.380 
